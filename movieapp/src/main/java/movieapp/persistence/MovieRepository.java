package movieapp.persistence;

import java.util.List;
import java.util.Optional;
import java.util.OptionalDouble;

import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import movieapp.dto.MovieStat;
import movieapp.entity.Movie;

// paramètres de généricité :
//	T = Movie : objets gérés par le répository
//	ID= Integer : type de la clé primaire
// By Default use database in Memory H2
//
// Query auto generated by Spring according to following rules:
// https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.query-creation
public interface MovieRepository extends JpaRepository<Movie, Integer>{
	// gifts : save/findAll/findById/...
	
	// select movie0_.id as id1_0_, movie0_.duration as duration2_0_, movie0_.title as title3_0_, movie0_.year as year4_0_ 
	// from movie movie0_ 
	// where movie0_.title=?
	List<Movie> findByTitle(String title);
	
	// 1 . Query autogenerated
	// select movie0_.id as id1_0_, movie0_.duration as duration2_0_, movie0_.title as title3_0_, movie0_.year as year4_0_ 
	// from movie movie0_ 
	// where upper(movie0_.title) like upper(?) escape ?
	// 2. Query tuned with fetch join
	// select movie0_.id as id1_0_0_, artist1_.id as id1_2_1_, movie0_.id_director as id_direc5_0_0_, movie0_.duration as duration2_0_0_, movie0_.title as title3_0_0_, movie0_.year as year4_0_0_, artist1_.birthdate as birthdat2_2_1_, artist1_.deathdate as deathdat3_2_1_, artist1_.name as name4_2_1_ 
	// from movies movie0_ inner join stars artist1_ on movie0_.id_director=artist1_.id 
	// where lower(movie0_.title) like ?
	@Query("select m from Movie m join fetch m.director where lower(m.title) like %:title%")
	List<Movie> findByTitleContainingIgnoreCase(String title);
	
	// where year = 2000
	List<Movie> findByYearOrderByTitle(int year);
	// where year >= 2000
	List<Movie> findByYearGreaterThanEqual(int yearMin);
	// where year <= 2000
	List<Movie> findByYearLessThanEqual(int yearMax);
	// where year between 2000 and 2009
	List<Movie> findByYearBetweenOrderByYear(int yearMin, int yearMax);
	List<Movie> findByYearBetween(int yearMin, int yearMax, Sort sort);
	
	// where title = 'The Lion King' and year = 1994
	List<Movie> findByTitleAndYear(String title, int year);
	
	// where duration is NULL
	
	// by director name
	List<Movie> findByDirectorName(String name);

	List<Movie> findByPlaysActorName(String name);	
	
	@Query("select coalesce(sum(m.duration),0) from Movie m where m.year between ?1 and ?2")
	long totalDuration(int yearMin, int yearMax);
	
	@Query("select avg(m.duration) from Movie m where m.year between :yearMin and :yearMax")
	Optional<Double> averageDuration(int yearMin, int yearMax);
	
	@Query("select new movieapp.dto.MovieStat(count(*), min(m.year), max(m.year)) from Movie m")
	MovieStat statistics();
	
	// "select m.year, count(*) from Movie m where m.year >= :yearT group by m.year having count(*) >= :countT order by m.year",
}
